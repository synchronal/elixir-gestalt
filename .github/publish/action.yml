name: "Publish to Hex"
description: "Publish an existing package to hex.pm when the version changes."
inputs:
  key:
    description: "Write key"
    required: true
  organization:
    description: "Optional organization to deploy package into"
    required: false
  name:
    description: "Name of package"
    required: true
  working-directory:
    description: "Working directory to Mix project"
    default: "."
    required: false
outputs:
  local-version:
    description: "Version from project"
    value: ${{ steps.local-version.outputs.VERSION }}
  remote-version:
    description: "Version published to hex"
    value: ${{ steps.remote-version.outputs.VERSION }}
runs:
  using: "composite"
  steps:
    - name: Deps Get
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        mix deps.get
        mix compile
    - name: Authenticate
      shell: bash
      run: |
        echo "::group::Auth"
        echo "Authenticating"
        echo "::endgroup::"
        mix hex.config api_key ${{ inputs.key }}

    - name: Find local version
      id: local-version
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        name=${{ inputs.name }}
        version=$(grep "@version \"" mix.exs | cut -d "\"" -f 2)

        echo "::group::Local version"
        echo "${version}"
        echo "::endgroup::"
        echo "::set-output name=VERSION::$(echo $version)"

    - name: Find remote version
      id: remote-version
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        name=${{ inputs.name }}
        organization=${{ inputs.organization }}
        SEMVER_REGEX="^(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)(\\-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$"

        echo "::group::Remote version"

        if [[ -n "${organization}" ]]; then
          search=$(mix hex.info "${name}" --organization "${organization}")
        else
          search=$(mix hex.info "${name}")
        fi

        echo "name: ${name}"
        echo "hex.search: ${search}"
        remote_version=$(echo "${search}" | grep 'Releases: ' | awk '{print $2}' | tr -d ',')

        echo "remote version: ${remote_version}"
        echo "::endgroup::"
        echo "::set-output name=VERSION::$(echo $remote_version)"

    - name: Verify versions
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        SEMVER_REGEX="^(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)(\\-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$"

        echo "::group::Versions"

        local_version=${{ steps.local-version.outputs.VERSION }}
        remote_version=${{ steps.remote-version.outputs.VERSION }}

        if [[ ! "${local_version}" =~ $SEMVER_REGEX ]]; then
          echo "::error::Unable to find local version ${local_version}"
          exit 1
        fi

        if [[ ! "${remote_version}" =~ $SEMVER_REGEX ]]; then
          echo "::error::Unable to find remote version ${remote_version}"
          exit 1
        fi

        echo "Project version: ${local_version}"
        echo "Released version: ${remote_version}"
        echo "::endgroup::"

    - name: Publish
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        local_version=${{ steps.local-version.outputs.VERSION }}
        remote_version=${{ steps.remote-version.outputs.VERSION }}
        organization=${{ inputs.organization }}

        echo "::group::Publish"

        if [[ "${local_version}" == "${remote_version}" ]]; then
          echo "Version has already been published"
          echo "Doing nothing"
          exit 0
        fi

        if [[ -n "$organization" ]]; then
          mix hex.publish --organization "$organization" --yes
        else
          mix hex.publish --yes
        fi

        echo "::endgroup::"
